{
  "hash": "763f239c1550ad850bd5936a383bc836",
  "result": {
    "markdown": "---\ntitle: \"Introduction to your computerʻs terminal utilities\"\nauthor:\n  - name: Marguerite Butler\n    url: https://butlerlab.org\n    affiliation: School of Life Sciences, University of Hawaii\n    affiliation_url: https://manoa.hawaii.edu/lifesciences/\ndescription: \"So much power; or how I got my computer to do my bidding\"\ndate: 2023-01-18\n# image: \"../../images/happygitwithr.png\"\ncategories: [module 1, week 1, programming, filesystem, shell]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**For future lectures, Iʻll give you some reading or podcasts to prepare**\n\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://academind.com/tutorials/terminal-zsh-basics>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Know the shell used in your computer`s operating system.\n-   Know basic shell commands and when you might want to use them.\n-   Know how to traverse your computer`s filesystem, grab input or put output anywhere.\n-   Understand the difference between relative and absolute file paths.\n-   Know how to create and manipulate files through the shell.\n:::\n\n# Introduction to the shell\n\nThis document gives a brief explanation of your computerʻs filesystems and how we will use the command line for this course.\n\n### The kernel\n\nThe *kernel* is the part of your computerʻs operating system that loads first once you start up. It is kind of like your computerʻs autonomic nervous system. It recognizes all of the physical hardware attached to it, enables communication between components (and device drivers), and monitors maintenance functions like turning on the fan when it gets hot, manages virtual memory, gives warnings when the hard drive gets full, manages multitasking, and manages security and file permissions. In the mac this is the XNU kernel, in modern Windows machines it is the Windows NT kernel.\n\n\n::: {.cell .fig-cap-location-top}\n::: {.cell-output-display}\n![](https://www.linuxandubuntu.com/ezoimgfmt/i0.wp.com/www.linuxandubuntu.com/wp-content/uploads/2019/07/macos-kernel-resources.jpg?w=1295&ssl=1&ezimgfmt=rs:275x519/rscb34/ngcb34/notWebP)\n:::\n:::\n\n\\[[Source: Map of MacOS: the heart of everything is called Darwin; and within it, we have separate system utilities and the XNU kernel, which is composed in parts by the Mach kernel and by the BSD kernel.](https://www.linuxandubuntu.com/home/difference-between-linux-kernel-mac-kernel)\\]\n\n\n### The shell\n\nThe shell is a software (an app) that allows humans to control the computer. You are already familiar with the *GUI* interface, or the *Graphical User Interface*. It is important that you are comfortable using the *Command Line Interface* as well.\n\nMacs use the same terminal utilities as UNIX/Linux systems. On the Mac, the command line interface app is called *Terminal*, which you will find in your *Application* folder, in the *Utilities* subfolder.\n\n\n::: {.cell .fig-cap-location-top}\n::: {.cell-output-display}\n![](terminal.png){width=986}\n:::\n:::\n\n\nOn a PC you would use the *Command Prompt* otherwise known as the *Windows Command Processor* or *CMD*. If you used a pre-Windows machine, you would be familiar with MS-DOS. To open CMD:\n\n1. Open the Start Menu and type \"command prompt\" or\n2. Press **Win + R** and type \"cmd\" in the run box or\n3. Press **Win + X** and select Command Prompt from the menu.\n\nNote: you may see *Windows PowerShell* or *Windows Terminal* instead, these are similar apps.\n\n\n#### The Working Directory\n\nBy default, the working directory on a Mac and UNIX/Linux systems is your home user directory \"\\~\". On a PC the default working directory may looks something like a subdirectory of your C drive \"C:\\Users\\[Username]\\\".\n\nThis is where you currently are in your computerʻs file structure.\n\nFirst, lets check where we are by listing the files in our current directory:\n\n```zsh\nls\n```\n\nPlease make a folder for your work in a convenient place and call it \"Rclass\". On a Mac you may want to put it in \"Documents\". Start by navigating into your Documents folder or other such folder where you want your Rclass work to be saved. **cd** is for *change directory*, and the syntax is **cd Foldername**:\n\n```zsh\ncd Documents\n```\n\n#### Making a new folder fron the command Line\n\nIn both systems, the **mkdir** command for *make directory* will create a new folder, and **cd** will change directories. :\n\n```zsh\nmkdir Rclass\ncd Rclass\n```\n\nListing the contents of a directory is done with **ls** in UNIX:\n```zsh\nls\n```\nAnd with **dir** in Windows:\n```\ndir\n```\n\nYou have now created the Rclass directory, changed directory again into Rclass, and listed files. (It should be empty.)\n\nThis seems like a lot of trouble, when you can just point and click. But the beauty of the shell is its power. We can automate actions, execute code, and use wildcards to do many at once.\n\nLetʻs say you wanted to create files in a new subfolder. **touch** is a command that creates a new (empty) file, or alters the timestamp of existing files.\n\n```zsh\nmkdir shell\ncd shell\ntouch dat.txt\n```\nFor Windows, you can create one file like this:\n```\ntype nul > dat.txt\n```\n\nCheck that you have a subfolder within Rclass that has one file named dat.txt.\n\nSuppose we wanted to create 10 files.  You can so easily in the UNIX shell:\n\n```zsh\ntouch dat{1..10}.txt\n```\n\nTo check your files timestamps list files with the -l flag:\n\n```zsh\nls -l\n```\n\nThe -a flag shows hidden files. You can do both at once:\n\n```zsh\nls -la\n```\n\n::: callout-note\n# Exercise:\n\n1. Create 20 files with the .jpg file extension.\n2. List your files now.\n3. Create 2 subdirectories, one called \"Data\" and one called \"Images\"\n:::\n\nSome additional very useful commands are those for moving, copying, and removing (deleting) files.  These can operate on your current directory, or you can add the *path* to your file. For example, to move your file into the Data subdirectory:\n\n```zsh\nmv dat1.txt Data/dat1.txt\nls\nls Data\n```\nAnywhere where you can indicate a filename, you can also add a path to that file.\n\n| function | UNIX | Windows CMD |  example |\n|------|-------|---------|----- |\n| move | mv filename newlocation | move filename newlocation | mv dat1.txt Data |\n| copy | cp filename newfilename | copy filename newfilename | cp dat1.txt catcat.txt |\n| remove | rm filename | del filename | rm dat1.txt |\n| list files | ls | dir | |\n| get working directory | pwd | cd | |\n\n*Note: UNIX commands are case-sensitive, Windows commands are not.*\n*Apologies in advance for any Windows command errors - Iʻm really not an expert. Please let me know so I can fix it. Thank you!*\n\n#### Wildcards\n\nYou can also select multiple files at once using wildcards. If you want to grab all of the .txt files, for example, you can do:\n\n```zsh\ncp *.txt Data\nls\nls Data\n```\n\nAnd you should have copied *all* files that end in .txt into Data.  You could alternatively used dat* which will select all files that begin with \"dat\" but can end in anything else.  The * will match any characters (zero or more).\n\nThere are a lot of other wildcards that you can use.\n\n::: callout-note\n# Exercise:\n\n1. Move all of your data files into Data, and all of your image files into Images.\n2. Remove any straggler files from the top level of shell, if you used the copy command.\n3. List files from shell, Data, and Images.\n:::\n\n# Relative paths vs. Absolute paths\n\nIn the Mac, there are two important \"shortcuts\".\n- \"/\" : The root directory of your entire computer, indicated by \"/\".\n- \"~\" : The root of your user directory, which for me is \"marguerite\". From the root directory, it will be \"/Users/username\"\n\nCheck out what is in these directories:\n```zsh\nls /\nls ~\n```\nA relative path will traverse the file directory *relative* to where you are currently.\n\nIn contrast, an absolute path will start from the very beginning of your root directory.\n\nYou can use these as starting points or shorthand. For example, \"cd ~/Documents\" will take you to the Documents folder inside your user directory, regardless of where you are currently because it is an **absolute path**.\n\n## Navigating your filedirectories\n\n- \".\" is the current working directory (where you are currently)\n- \"..\" is the directory one level up\n- \"./foldername\" will take you to the folder one level down, for example \"./Data\"\n\nYou can use these paths to move directories using *cd*  or to list the contents of the directories using *ls* or to make new directories using *mkdir* \n\n```zsh\nls .\nls ./Data\nmkdir ./Data/A\n```\nMake multiple directories:\n\n```zsh\nmkdir ./Data/B ./Data/C\n```\n\n# Executing software from the command Line\n\ncoming soon\n\n# Piping commands\n\nYou can redirect output using *>*  and *<* with the point indicating the direction.  Here is an example. First letʻs put some contents into the files, and check the contents with the command \"less\" (there is also \"more\"):\n\n```zsh\necho \"A\" > dat1.txt\nless dat1.txt\n```\n\n*>* pipes (or sends) output to the file named \"dat1.txt\".  If the file doesnʻt exist, it will create it. If it already exists, it will *replace* the file.\n\nIf you want to add on to the file, use \">>\"\n\n```zsh\necho \"Another letter B\" > dat1.txt\nless dat1.txt\n```\nOutput to multiple files:\n\n```zsh\necho \"c\" >dat2.txt >dat3.txt\nless dat2.txt\nless dat3.txt\n```\n\nConcatenate (combine) multiple files using *cat* and send it to file\n\n```zsh\ncat dat1.txt dat2.txt dat3.txt\ncat dat1.txt dat2.txt dat3.txt >all.txt\nless all.txt\n```\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  What is a command line interface?\n\n2.  How can using the command line help with file organization or reorganization?\n\n3.  What is the importance of choosing a good file naming system?\n\n3.  What is the difference between a relative path and an absolute path?\n:::\n\n### Additional Resources\n\n::: callout-tip\n- [A tutorial for zsh on Macs](https://academind.com/tutorials/terminal-zsh-basics)\n- [Bash shell cheat sheet (mostly works for zsh too)](https://www.educative.io/blog/bash-shell-command-cheat-sheet)\n- [A tutorial for CMD on PCs](https://www.makeuseof.com/tag/a-beginners-guide-to-the-windows-command-line/)\n- [Windows CMD cheat sheet](https://serverspace.us/support/help/windows-cmd-commands-cheat-sheet/)\n:::\n\n## rtistry\n\n\n::: {.cell .fig-cap-location-top}\n::: {.cell-output-display}\n![](https://github.com/djnavarro/art/raw/master/static/gallery/flametree/extra/001_flametree_20_13.jpg)\n:::\n:::\n\n\n\\['Flametree' from Danielle Navarro <https://art.djnavarro.net>\\]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}